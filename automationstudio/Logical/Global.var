
VAR
	robot1 : robotType;	(* Robot picking from looping conveyor *)
	robot2 : robotType;	(* Robot packing onto carts *)
	
	sensorState : sensorStateEnum; 	(* State for sensor fsm *)
	
	newPack : packageType; 						(* Most recent package detected *)
	newPackR1 : packageType;				(* Current package grabbed by robot1 *)
	newPackLoaded : BOOL := FALSE;				(* Flag if robot1 has loaded newPack *)
	newPackReady : BOOL := FALSE;				(* Flag if newPack is ready for robot1 *)
	packDiscarded : BOOL := FALSE;				(* Flag is newPack has been discarded *)
	packBuffer : ARRAY[0..packBufSize] OF packageType;	(* Packs on packing conveyor *)
	packIndex : INT := 0; (* Index for the packing conveyor buffer *)
	packRanges : packingRangesType;				(* Package limits *)

	packFeeder : packFeederType;	(* Feeder control *)
	sensors : sensorsType;			(* Sensor inputs *)
	conveyors : conveyorsType;		(* Conveyor control *)
	
	timer_discard : TON;				(* ON timer for discard conveyor *)
	timePacking : TIME;					(* Time tracking for packing conveyor *)
	timePackingLimit : TIME := t#2s;	(* Time limit for packing conveyor *)
	
	packageDetectionBuffer : ARRAY[0..bufSize] OF bufferType;	(* pack sensor data buffer *)
	bufIndex : INT := 0; 		(* Index for the package detection buffer *)
	
	packCalc : packCalculationType; (* Struct for package size calculation *)
	
	Index : INT; (* Reserved for loop use *)
END_VAR

VAR CONSTANT
	LASER_DEFAULT_VALUE_HEIGHT : INT := 0;	(* No-package measurement value *)
	LASER_DEFAULT_VALUE_WIDTH : INT := 0;	(* No-package measurement value *)
	TRACK_WIDTH : INT := 650; (* Total width of the track, [mm] *)
	
	PACKAGE_PICKUP_LOW_LIMIT : INT := 300; (* Packages taller than this needs the high pickup *)
	PACKAGE_PICKUP_WIDTH_LIMIT : INT := 250; (* Packages with corners closer than this from right sensor gets an off-center pickup *)
	
	packBufSize : INT := 20 - 1; (* Elements for the packing conveyor buffer *)
	bufSize : INT := 400 - 1; (* Elements for the measurement buffer *)
END_VAR
